///////////////////////////////////////////////////////////////////////////////
//
// Build Script for building aggregated JavaPOS library from 
// JavaPOS Contracts, JavaPOS Controls, and JCL libraries
// 
// Author: denis.kuniss@dieboldnixdorf.com
// 
///////////////////////////////////////////////////////////////////////////////

plugins {
	id 'java-library'
	id 'signing'
	id 'eclipse'
    id 'maven-publish'
    id("io.github.gradle-nexus.publish-plugin") version "1.1.0"
}

wrapper {
	gradleVersion = '7.1.1'
}


///////////////////////////////////////////////////////////////////////////////
// Names and Versions
///////////////////////////////////////////////////////////////////////////////

def artifactName = 'javapos'
group='org.javapos'
def uposVersion = '1.15'
version="${uposVersion}.0-SNAPSHOT" // the last part after dot is the build/release version

// dependency versions
def javaposContractsVersion = "$uposVersion.0+"
def javaposControlsVersion  = "$uposVersion.0+"
def jclVersion = '3.0.0'
def xercesVersion = '1.2.3'  // artificial dependency inherited from javapos-config-loader - take over from there

sourceCompatibility = 8 // not really need, no compilation at all; but documentation reason

///////////////////////////////////////////////////////////////////////////////
// Build Dependencies
///////////////////////////////////////////////////////////////////////////////

repositories {
    mavenCentral()
    
    // for resolving snapshots from MavenCentral
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }

    if (!System.getenv('CI')) {
        mavenLocal()
    }
}

configurations {
	javaposLibs
	javaposSources
}

dependencies {
    api "xerces:xerces:$xercesVersion" // artificial dependency inherited from javapos-config-loader

	javaposLibs ("org.javapos:javapos-contracts:$javaposContractsVersion") { transitive = false } 
	javaposLibs ("org.javapos:javapos-controls:$javaposControlsVersion") { transitive = false }
	javaposLibs ("org.javapos:javapos-config-loader:$jclVersion") { transitive = false }
	
	javaposSources ("org.javapos:javapos-contracts:$javaposContractsVersion:sources") { transitive = false } 
	javaposSources ("org.javapos:javapos-controls:$javaposControlsVersion:sources") { transitive = false }
	javaposSources ("org.javapos:javapos-config-loader:$jclVersion:sources") { transitive = false }
}


///////////////////////////////////////////////////////////////////////////////
// Build Tasks
///////////////////////////////////////////////////////////////////////////////

java {
    withSourcesJar()
    withJavadocJar()
}

def javaposManifest = 	manifest {
        attributes('Specification-Title': 'UnifiedPOS Standard',
				   'Specification-Vendor': 'UnifiedPOS Committee',
                   'Specification-Version': uposVersion,
                   'Implementation-Title': 'JavaPOS Library (Contracts, Controls, JCL)',
				   'Implementation-Vendor': 'github.com/JavaPOSWorkingGroup',
                   'Implementation-Version': version)
}

def changelogFile = file('build/CHANGELOG.md')
task createChangelog {
    group = 'build'
    description = 'creates CHANGELOG.md, listing incoprorated JavaPOS libraries'
    
    // ensure jar is rebuild in case project version has changed
    inputs.property 'javaposContractsVersion', javaposContractsVersion 
    inputs.property 'javaposControlsVersion', javaposControlsVersion 
    inputs.property 'jclVersion', jclVersion 

    doLast {
        changelogFile.parentFile.mkdirs()
        changelogFile.text = 
"""\
# JavaPOS Library $version

Incorporates sub component versions

- javapos-contracts-$javaposContractsVersion
- javapos-controls-$javaposControlsVersion
- javapos-config-loader-$jclVersion
"""
    }
}

def jarContentFrom = { configuration -> 
    copySpec {
        configuration.each {
            def dependencyName = it.name.replace('.jar', '')
            from(zipTree(it)) {
                exclude 'META-INF/MANIFEST.MF'
                rename 'CHANGELOG.md', "${dependencyName}.CHANGELOG.md" 
            }
        }
        
        from (changelogFile) {
            into 'META-INF' 
        }
    }
}

jar {
	archiveBaseName = artifactName
	manifest = javaposManifest
    duplicatesStrategy = DuplicatesStrategy.FAIL
	
	dependsOn createChangelog

    // ensure jar is rebuild in case project version has changed
	inputs.property 'version', project.version 

    with jarContentFrom(configurations.javaposLibs)
}

sourcesJar {
	manifest = javaposManifest
    duplicatesStrategy = DuplicatesStrategy.FAIL

    dependsOn createChangelog
    
    with jarContentFrom(configurations.javaposSources)
}


///////////////////////////////////////////////////////////////////////////////
// Artifact Upload
///////////////////////////////////////////////////////////////////////////////

nexusPublishing {
    repositories {
        sonatype()
    }
}

def githubProjectUrl = 'https://github.com/JavaPOSWorkingGroup/javapos'

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            pom {
                name = artifactName
                description = 'JavaPOS Library'
                url = githubProjectUrl
                licenses {
                    license {
                        name = 'Common Public License (CPL) -- V1.0'
                        url = 'https://www.eclipse.org/legal/cpl-v10.html'
                    }
                }
                developers {
                    developer {
                        id = 'javapos'
                        name = 'JavaPOS Working Group'
                        email = 'builder@javapos.org'
                    }
                }
                scm {
                    connection = "scm:${githubProjectUrl}.git"
                    developerConnection = "scm:git:${githubProjectUrl}.git"
                    url = "${githubProjectUrl}.git"
                }
            }
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}
